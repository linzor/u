#!/bin/bash
# https://github.com/linzor/u 
# Arch Linux update script v1.3

# Options:

# Define an aur helper
aurh="paru"

# Define if you want notifications (doesnt include errors)
notifyonstepcomplete="1" 

# Define if you want to build an init image
# 0 = dont build an image
# 1 = automatically build an image
# 2 = ask everytime
initimage="2"

# Define a command for building an image
cmdgenimg="sudo mkinitcpio -p linux"

# Enable/Disable ntp system time update 
# Depends on ntp package
UpdateNTP="1"

# Define an ntp update time server (Default: time.nist.gov)
NTPserver="time.nist.gov"

# Define if you want to look for a new ntp server (in case your default doesn't work)
NTPFindNewServer="1"

# Define prefered ntp servers region (in case your default doesn't work)
NTPregion="europe"

# CONFIG_END
# 
#

# Variables:

var_loc_ntpserverlist='/tmp/u.cache.ntp.server.list'
var_tty_main="$(tty)"
echo "$var_tty_main" > /dev/null

var_DependencyList="shuf
$aurh
pacman
ntpdate
notify-send
systemctl
bash
sudo"

# Variables (output strings):

var_msg_rp="Running Update ..."
var_msg_skpimg="Skiping over init image generation"
var_msg_genint="Starting Init Image Generation ..."
var_msg_yrt="sudo permission granted"
var_msg_errnr="
need sudo permissions
"
var_msg_SF="System is set to shutdown 10 seconds after update.

Image Generation is Forced.
"
var_msg_SR="System is set to reboot 10 seconds after update.

Image Generation is Forced.
"

# Functions: 

function notifycolorprint(){
colorprint "$@"
if [[ "$notifyonstepcomplete" = "1" ]];then
notify-send -a "u.sh" "$(echo -n "$*" | sed -e "s/$1 //")" & disown
fi
}

function colorprint(){
printf "\e[1;$1%-6s\e[m\n" "$(echo -n "$*" | sed -e "s/$1 //")"
}

function DependencyCheck(){
echo "$var_DependencyList" | while IFS= read depcheckpipe; do
which "$depcheckpipe" >/dev/null || MissingDependency "$depcheckpipe"
done
}

function MissingDependency(){
colorprint 33m "Missing Dependency: $*"
Stop Dependency Check
}

function Uconfig(){
which u 2>/dev/null >/dev/null && ufip="1" || ufip="0" 
[[ $ufip = "0" ]] && printf "\e[1;32m%-6s\e[m\n" " script is not in your path"
[[ $ufip = "1" ]] && $EDITOR $(which u)
exit 1
}

function helpmenu(){
echo "u - Arch Linux update shell script
Script can be configured by editing the source.
If you have added this script to your PATH use -c

Options:
-c	opens the script in $EDITOR
-h	this message
-s	forces the init image generation, adds '--noconfirm' and shuts down the system (unless update errors out)
-r	forces the init image generation, adds '--noconfirm' and reboots the system (unless update errors out)
-f	allows you to directly call a function from the script (example: ./u.sh -f ntpgetserverlist)

Current settings:
aurh=$aurh
notifyonstepcomplete=$notifyonstepcomplete
initimage=$initimage
cmdgenimg=$cmdgenimg
UpdateNTP=$UpdateNTP
NTPserver=$NTPserver
NTPregion=$NTPregion
NTPFindNewServer=$NTPFindNewServer"
exit 1
}

function directcallfunc(){
$*
}

function noroot(){
notifycolorprint 31m "$var_msg_errnr"
}

function yroot(){
colorprint 32m "$var_msg_yrt"
Umain
}

function ntpcheckserver(){
if [[ "$(ntpgetserverstate $NTPserver)" = "0" ]];then
	if [[ "$var_ntpcheck_count" = "7" ]];then
		colorprint 33m "NTP Server ("$NTPserver") is not responding"
		sleep 1
		if [[ "$NTPFindNewServer" = "1" ]];then
		echo "Looking for a different NTP Server . . ."
		ntpswitchserver
		else
		echo "Setting NTPFindNewServer is set to $NTPFindNewServer"
		Stop 1 Could not connect to an ntp server.	
		fi
	else
	var_ntpcheck_count="$(expr $var_ntpcheck_count + 1)"
	ntpcheckserver
	fi
fi
}

function ntpswitchserver(){
NTPserver="$(echo -n "$(ntpgetserverlist)" | sed -n $(shuf -i 1-$(cat $var_loc_ntpserverlist | wc -l) -n 1)p)"
if [[ "$(ntpgetserverstate $NTPserver)" = "1" ]];then
colorprint 32m "New NTP Server: $NTPserver"
else
nss_count="$(expr $nss_count + 1)"
echo "Checked server: $NTPserver ($nss_count)"
sleep 1
if [[ "$nss_count" = "10" ]];then
Stop 1 Could not connect to the ntp server.
else
ntpswitchserver
fi
fi
}

function ntptimeupdate(){
if [[ "$UpdateNTP" = "1" ]];then
ntpcheckserver
echo "Current OS time: $(date)"
colorprint 32m "NTP-server: $NTPserver"
sudo ntpdate -s $NTPserver && stepcomplete NTP Update || Stop ntp
echo "Hardware clock: $(sudo hwclock -u)"
echo "Updated OS time: $(date)"
else
colorprint 32m Skiping over ntp time update ...
fi
}

function ntpgetserverstate(){
ping -c 1 $1 >/dev/null 2>/dev/null && echo '1' || echo '0'
}

function ntpgetserverlist(){
touch $var_loc_ntpserverlist
cat $var_loc_ntpserverlist 2>/dev/null | grep '.ntp.org' >/dev/null 2>/dev/null && vnsll='1'
if [[ "$vnsll" = '1' ]];then
cat $var_loc_ntpserverlist
	else
curl https://www.ntppool.org/zone/$NTPregion -s | grep '.org' | grep '.ntp.' | grep '<a href="/zone/' | cut -d ';' -f2 | cut -d '(' -f1 | sed -e 's/ //g' > $var_loc_ntpserverlist 
var_ngsl_count="$(expr $var_ngsl_count + 1)"
	if [[ "$var_ngsl_count" = "5" ]];then
		Stop 1 Could not get the ntp server list.
		else
		ntpgetserverlist
	fi
fi
}

function mlocale(){
colorprint 32m Updating mlocale database...
sudo updatedb && stepcomplete mlocale || Stop mlocale
}

function checkmlocale(){
#checks for the mlocale package utils
which locate >/dev/null || nml=1
which updatedb >/dev/null || nml=1
if [[ $nml = "1" ]];then
colorprint 31m "mlocale not found, skiping..."
else
mlocale
fi
}

function Stop(){
var_msg_stp="$* errored out. Stoping update ..."
[[ "$1" = "1" ]] && var_msg_stp="$2 $3 $4 $5 $6 $7 $8 $9"
notifycolorprint 33m "$var_msg_stp" > $var_tty_main 2>/dev/null
kill $$ >/dev/null 2>/dev/null &
kill $$ >/dev/null 2>/dev/null
}

function stepcomplete(){
var_msg_sct="$* process complete, moving on ..."
notifycolorprint 34m "$var_msg_sct"
}

function GenImage(){
notifycolorprint 34m "$var_msg_genint"
sh -c "$cmdgenimg" && stepcomplete init image generation || Stop Image Generation
}

function GenImageAsk(){
[[ "$initimage" = "0" ]] && colorprint 34m "$var_msg_skpimg"
[[ "$initimage" = "1" ]] && GenImage
if [[ "$initimage" = "2" ]];then
read -p "Do you want to generate an init image? [y/n]: " gimga
	if [[ "$gimga" = "y" ]];then
	GenImage
	else
	colorprint 34m "$var_msg_skpimg"
	fi
fi
}

function Umain(){
notifycolorprint 34m "$var_msg_rp"
ntptimeupdate
sudo pacman -Syu $noconfirm && stepcomplete Pacman || Stop Pacman
$aurh -Syu $noconfirm && stepcomplete $aurh || Stop $aurh
checkmlocale
stepcomplete Update
GenImageAsk
sh -c "$SRFv"
echo " Done."
}

function SF(){
initimage="1"
notifycolorprint 31m "$var_msg_SF"
SRFv='notify-send -a "u.sh" "Shutdown in 10 seconds ..." ; echo "Shutdown in 10 seconds ..." && sleep 9 && notify-send -a "u.sh" "bye bye <3" && sleep 1 && systemctl poweroff'
noconfirm="--noconfirm"
}

function SR(){
initimage="1"
notifycolorprint 31m "$var_msg_SR"
SRFv='notify-send -a "u.sh" "Reboot in 10 seconds ..." ; echo "Reboot in 10 seconds ..." && sleep 10 && systemctl reboot'
noconfirm="--noconfirm"
}

while getopts 'chsrf' FLAGS >/dev/null ; do
case "$FLAGS" in
	c)
		Uconfig
		;;
	h)
		helpmenu
		;;
	s)
		SF
		;;
	r)
		SR
		;;
	f)
		directcallfunc $2 $3 $4 $5 $6 $7 $8 $9
		exit 1
		;;
	?)
	echo " "
	helpmenu
	;;
esac
done
DependencyCheck
sudo printf "" && yroot || noroot